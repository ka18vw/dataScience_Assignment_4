from tensorflow.keras.datasets import mnist
from sklearn.model_selection import train_test_split

#load dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data() 

number_of_training_instances = X_train.shape[0]
number_of_testing_instances = X_test.shape[0]

#reshape dataset
X_train = X_train.reshape((number_of_training_instances, 28*28))
X_test = X_test.reshape((number_of_testing_instances, 28*28))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)

#sanity check
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

Model = Sequential()

#input layer:
Model.add(InputLayer(input_shape = (28,28,1,)))

#hidden layer:
hidden_layer = Dense(100, activation = 'relu',kernel_initializer='he_uniform')
Model.add(hidden_layer)

#output layer:
output_layer = Dense(10, activation = 'softmax')
Model.add(output_layer)

Model.compile(loss = 'categorical_crossentropy', metrics=['accuracy'])

Model.fit(X_train, y_train, epochs = 10)
performance = Model.evaluate(X_test, y_test)
print(performance)
Model.save('digits_model.h5')
